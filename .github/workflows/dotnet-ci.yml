name: Build, Test & Publish (Dynamic .NET + E2E Tests)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: "Select environment"
        required: true
        default: "dev"
        type: choice
        options: [dev, stage, prod]

jobs:
  build-test-publish:
    runs-on: windows-latest
    steps:

      # ---------------- Checkout Source ----------------
      - name: Checkout source
        uses: actions/checkout@v4

      # ---------------- NuGet for .NET Framework ----------------
      - name: Setup NuGet for .NET Framework
        uses: NuGet/setup-nuget@v1

      # ---------------- Detect Projects ----------------
      - name: Detect all projects
        id: detect
        shell: bash
        run: |
          echo "Detecting projects..."
          mkdir -p project_list
          find . -name "*.csproj" > project_list/all_projects.txt

          dotnet_projects=()
          framework_projects=()

          while IFS= read -r proj; do
            if grep -q '<TargetFramework>net' "$proj"; then
              dotnet_projects+=("$proj")
            else
              framework_projects+=("$proj")
            fi
          done < project_list/all_projects.txt

          echo "DOTNET_PROJECTS=${dotnet_projects[*]}" >> $GITHUB_ENV
          echo "FRAMEWORK_PROJECTS=${framework_projects[*]}" >> $GITHUB_ENV
          echo "Detected .NET projects: ${dotnet_projects[*]}"
          echo "Detected .NET Framework projects: ${framework_projects[*]}"

      # ---------------- Setup .NET SDK ----------------
      - name: Setup .NET 8 SDK
        if: env.DOTNET_PROJECTS != ''
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # ---------------- Restore Projects ----------------
      - name: Restore all projects
        shell: bash
        run: |
          if [ -n "${DOTNET_PROJECTS}" ]; then
            for proj in ${DOTNET_PROJECTS}; do
              echo "Restoring $proj"
              dotnet restore "$proj"
            done
          fi

          if [ -n "${FRAMEWORK_PROJECTS}" ]; then
            for proj in ${FRAMEWORK_PROJECTS}; do
              echo "Restoring $proj"
              nuget restore "$proj" -ConfigFile NuGet.Config
            done
          fi

      # ---------------- Build Projects ----------------
      - name: Build all projects
        shell: bash
        run: |
          if [ -n "${DOTNET_PROJECTS}" ]; then
            for proj in ${DOTNET_PROJECTS}; do
              echo "Building $proj"
              dotnet build "$proj" --configuration Release --no-restore
            done
          fi

          if [ -n "${FRAMEWORK_PROJECTS}" ]; then
            for proj in ${FRAMEWORK_PROJECTS}; do
              echo "Building $proj"
              msbuild "$proj" /p:Configuration=Release /p:Platform="Any CPU"
            done
          fi

      # ---------------- Run Unit / E2E Tests ----------------
      - name: Run Unit & E2E Tests
        shell: pwsh
        run: |
          # Create folder for test results
          $testResultsDir = "$PWD/TestResults"
          New-Item -ItemType Directory -Force -Path $testResultsDir

          # .NET Core / .NET 8 test projects
          if ($env:DOTNET_PROJECTS) {
            foreach ($proj in $env:DOTNET_PROJECTS.Split(' ')) {
              if ($proj -like "*Tests*") {
                Write-Host "Running dotnet tests: $proj"
                dotnet test $proj `
                  --configuration Release `
                  --no-build `
                  --logger "trx;LogFileName=$($testResultsDir)/$(Split-Path $proj -LeafBase)-results.trx"
              }
            }
          }

          # .NET Framework test projects
          if ($env:FRAMEWORK_PROJECTS) {
            nuget install NUnit.ConsoleRunner -Version 3.13.0 -OutputDirectory packages
            foreach ($proj in $env:FRAMEWORK_PROJECTS.Split(' ')) {
              if ($proj -like "*Tests*") {
                Write-Host "Running NUnit tests: $proj"
                $dllPath = Join-Path -Path (Split-Path $proj -Parent) -ChildPath "bin\Release\" + (Split-Path $proj -LeafBase) + ".dll"
                packages\NUnit.ConsoleRunner.3.13.0\tools\nunit3-console.exe $dllPath `
                  --result="$($testResultsDir)\$(Split-Path $proj -LeafBase)-results.xml;format=nunit2"
              }
            }
          }

      # ---------------- Upload Test Results ----------------
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults/

      # ---------------- Optional: GitHub Checks ----------------
      - name: Publish Test Results to GitHub
        uses: dorny/test-reporter@v1
        with:
          name: E2E Tests
          path: TestResults/**/*.trx
          reporter: dotnet-trx
          fail-on-error: true

      # ---------------- Publish Projects ----------------
      - name: Publish all projects
        shell: bash
        run: |
          envName=${{ github.event.inputs.environment }}
          mkdir -p ./publish/$envName

          if [ -n "${DOTNET_PROJECTS}" ]; then
            for proj in ${DOTNET_PROJECTS}; do
              projName=$(basename $(dirname $proj))
              echo "Publishing $proj -> ./publish/$envName/$projName"
              dotnet publish "$proj" -c Release -o ./publish/$envName/$projName
            done
          fi

          if [ -n "${FRAMEWORK_PROJECTS}" ]; then
            for proj in ${FRAMEWORK_PROJECTS}; do
              projName=$(basename $(dirname $proj))
              outdir=./publish/$envName/$projName
              echo "Publishing $proj -> $outdir"
              msbuild "$proj" /p:Configuration=Release /p:Platform="Any CPU" /p:OutputPath=$outdir
            done
          fi

      # ---------------- Upload Build Artifacts ----------------
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-projects-${{ github.event.inputs.environment }}
          path: ./publish/${{ github.event.inputs.environment }}

      # ---------------- Azure Deployment (Commented Out) ----------------
      # - name: Azure Login
      #   uses: azure/login@v1
      #   with:
      #     creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: Deploy to Azure App Service
      #   uses: azure/webapps-deploy@v2
      #   with:
      #     app-name: ${{ secrets["APP_NAME_" + github.event.inputs.environment] }}
      #     slot-name: Production
      #     publish-profile: ${{ secrets["AZURE_PUBLISH_PROFILE_" + github.event.inputs.environment] }}
      #     package: ./publish/${{ github.event.inputs.environment }}/*
